// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: requests.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRequest = `-- name: CreateRequest :one
INSERT INTO requests (
    course_id,
    confirm,
    pending

) VALUES (
    $1, $2, $3
) RETURNING request_id, course_id, confirm, pending, created_at, updated_at
`

type CreateRequestParams struct {
	CourseID int64 `json:"course_id"`
	Confirm  bool  `json:"confirm"`
	Pending  bool  `json:"pending"`
}

func (q *Queries) CreateRequest(ctx context.Context, arg CreateRequestParams) (Request, error) {
	row := q.db.QueryRow(ctx, createRequest, arg.CourseID, arg.Confirm, arg.Pending)
	var i Request
	err := row.Scan(
		&i.RequestID,
		&i.CourseID,
		&i.Confirm,
		&i.Pending,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRequest = `-- name: GetRequest :one
SELECT request_id, course_id, confirm, pending, created_at, updated_at FROM requests
WHERE request_id = $1 LIMIT 1
`

func (q *Queries) GetRequest(ctx context.Context, requestID int64) (Request, error) {
	row := q.db.QueryRow(ctx, getRequest, requestID)
	var i Request
	err := row.Scan(
		&i.RequestID,
		&i.CourseID,
		&i.Confirm,
		&i.Pending,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateRequest = `-- name: UpdateRequest :one
UPDATE requests
SET 
    confirm = COALESCE($1, confirm),
    pending = COALESCE($2, pending)
WHERE
    course_id = $3
RETURNING request_id, course_id, confirm, pending, created_at, updated_at
`

type UpdateRequestParams struct {
	Confirm  pgtype.Bool `json:"confirm"`
	Pending  pgtype.Bool `json:"pending"`
	CourseID int64       `json:"course_id"`
}

func (q *Queries) UpdateRequest(ctx context.Context, arg UpdateRequestParams) (Request, error) {
	row := q.db.QueryRow(ctx, updateRequest, arg.Confirm, arg.Pending, arg.CourseID)
	var i Request
	err := row.Scan(
		&i.RequestID,
		&i.CourseID,
		&i.Confirm,
		&i.Pending,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
