// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: marks.sql

package db

import (
	"context"
)

const createMark = `-- name: CreateMark :one
INSERT INTO marks (
    course_id,
    user_id,
    marks
) VALUES (
    $1, $2, $3
) RETURNING mark_id, course_id, user_id, marks, created_at, updated_at
`

type CreateMarkParams struct {
	CourseID int64 `json:"course_id"`
	UserID   int64 `json:"user_id"`
	Marks    int64 `json:"marks"`
}

func (q *Queries) CreateMark(ctx context.Context, arg CreateMarkParams) (Mark, error) {
	row := q.db.QueryRow(ctx, createMark, arg.CourseID, arg.UserID, arg.Marks)
	var i Mark
	err := row.Scan(
		&i.MarkID,
		&i.CourseID,
		&i.UserID,
		&i.Marks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMark = `-- name: DeleteMark :exec
DELETE FROM marks
WHERE mark_id = $1
`

func (q *Queries) DeleteMark(ctx context.Context, markID int64) error {
	_, err := q.db.Exec(ctx, deleteMark, markID)
	return err
}

const getMark = `-- name: GetMark :one
SELECT mark_id, course_id, user_id, marks, created_at, updated_at FROM marks
WHERE mark_id = $1
`

func (q *Queries) GetMark(ctx context.Context, markID int64) (Mark, error) {
	row := q.db.QueryRow(ctx, getMark, markID)
	var i Mark
	err := row.Scan(
		&i.MarkID,
		&i.CourseID,
		&i.UserID,
		&i.Marks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listMarks = `-- name: ListMarks :many
SELECT mark_id, course_id, user_id, marks, created_at, updated_at FROM marks
WHERE course_id = $1
ORDER BY user_id
LIMIT $2
OFFSET $3
`

type ListMarksParams struct {
	CourseID int64 `json:"course_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

func (q *Queries) ListMarks(ctx context.Context, arg ListMarksParams) ([]Mark, error) {
	rows, err := q.db.Query(ctx, listMarks, arg.CourseID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Mark{}
	for rows.Next() {
		var i Mark
		if err := rows.Scan(
			&i.MarkID,
			&i.CourseID,
			&i.UserID,
			&i.Marks,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMark = `-- name: UpdateMark :one
UPDATE marks
SET marks = $2 , user_id = $3, course_id = $4
WHERE mark_id = $1
RETURNING mark_id, course_id, user_id, marks, created_at, updated_at
`

type UpdateMarkParams struct {
	MarkID   int64 `json:"mark_id"`
	Marks    int64 `json:"marks"`
	UserID   int64 `json:"user_id"`
	CourseID int64 `json:"course_id"`
}

func (q *Queries) UpdateMark(ctx context.Context, arg UpdateMarkParams) (Mark, error) {
	row := q.db.QueryRow(ctx, updateMark,
		arg.MarkID,
		arg.Marks,
		arg.UserID,
		arg.CourseID,
	)
	var i Mark
	err := row.Scan(
		&i.MarkID,
		&i.CourseID,
		&i.UserID,
		&i.Marks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
