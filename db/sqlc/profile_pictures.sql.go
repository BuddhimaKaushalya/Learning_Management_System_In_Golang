// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: profile_pictures.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProfilePicture = `-- name: CreateProfilePicture :one
INSERT INTO profile_pictures(
    user_id,
    picture
) VALUES (
    $1, $2
) RETURNING profile_picture_id, user_id, picture, created_at, updated_at
`

type CreateProfilePictureParams struct {
	UserID  int64  `json:"user_id"`
	Picture string `json:"picture"`
}

func (q *Queries) CreateProfilePicture(ctx context.Context, arg CreateProfilePictureParams) (ProfilePicture, error) {
	row := q.db.QueryRow(ctx, createProfilePicture, arg.UserID, arg.Picture)
	var i ProfilePicture
	err := row.Scan(
		&i.ProfilePictureID,
		&i.UserID,
		&i.Picture,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProfilePicture = `-- name: DeleteProfilePicture :exec
DELETE FROM profile_pictures
WHERE user_id = $1
`

func (q *Queries) DeleteProfilePicture(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, deleteProfilePicture, userID)
	return err
}

const getProfilePicture = `-- name: GetProfilePicture :one
SELECT profile_picture_id, user_id, picture, created_at, updated_at FROM profile_pictures
WHERE user_id = $1
`

func (q *Queries) GetProfilePicture(ctx context.Context, userID int64) (ProfilePicture, error) {
	row := q.db.QueryRow(ctx, getProfilePicture, userID)
	var i ProfilePicture
	err := row.Scan(
		&i.ProfilePictureID,
		&i.UserID,
		&i.Picture,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProfilePicture = `-- name: UpdateProfilePicture :one
UPDATE profile_pictures
SET
    picture = COALESCE($1,picture)
WHERE
    user_id = $2
RETURNING profile_picture_id, user_id, picture, created_at, updated_at
`

type UpdateProfilePictureParams struct {
	Picture pgtype.Text `json:"picture"`
	UserID  int64       `json:"user_id"`
}

func (q *Queries) UpdateProfilePicture(ctx context.Context, arg UpdateProfilePictureParams) (ProfilePicture, error) {
	row := q.db.QueryRow(ctx, updateProfilePicture, arg.Picture, arg.UserID)
	var i ProfilePicture
	err := row.Scan(
		&i.ProfilePictureID,
		&i.UserID,
		&i.Picture,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
