// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkEmail = `-- name: CheckEmail :one
SELECT u.email
FROM users u
WHERE EXISTS (
    SELECT user_id, user_name, first_name, last_name, email, is_email_verified, hashed_password, password_changed_at, role, created_at, updated_at
    FROM users
    WHERE u.email = $1
)
`

func (q *Queries) CheckEmail(ctx context.Context, email string) (string, error) {
	row := q.db.QueryRow(ctx, checkEmail, email)
	err := row.Scan(&email)
	return email, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    user_name,
    first_name,
    last_name,
    hashed_password,
    email,
    role,
    is_email_verified
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING user_id, user_name, first_name, last_name, email, is_email_verified, hashed_password, password_changed_at, role, created_at, updated_at
`

type CreateUserParams struct {
	UserName        string `json:"user_name"`
	FirstName       string `json:"first_name"`
	LastName        string `json:"last_name"`
	HashedPassword  string `json:"hashed_password"`
	Email           string `json:"email"`
	Role            string `json:"role"`
	IsEmailVerified bool   `json:"is_email_verified"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.UserName,
		arg.FirstName,
		arg.LastName,
		arg.HashedPassword,
		arg.Email,
		arg.Role,
		arg.IsEmailVerified,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsEmailVerified,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUsers = `-- name: DeleteUsers :exec
DELETE FROM users
WHERE user_id = $1
`

func (q *Queries) DeleteUsers(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, deleteUsers, userID)
	return err
}

const getTotalRegisteredUserCount = `-- name: GetTotalRegisteredUserCount :one
SELECT COUNT(*) FROM users
WHERE is_email_verified = $1
`

func (q *Queries) GetTotalRegisteredUserCount(ctx context.Context, isEmailVerified bool) (int64, error) {
	row := q.db.QueryRow(ctx, getTotalRegisteredUserCount, isEmailVerified)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getTotalUserCount = `-- name: GetTotalUserCount :one
SELECT COUNT(*) FROM users
WHERE role = $1
`

func (q *Queries) GetTotalUserCount(ctx context.Context, role string) (int64, error) {
	row := q.db.QueryRow(ctx, getTotalUserCount, role)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUser = `-- name: GetUser :one
SELECT user_id, user_name, first_name, last_name, email, is_email_verified, hashed_password, password_changed_at, role, created_at, updated_at FROM users
WHERE user_name = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userName string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, userName)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsEmailVerified,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT user_id, user_name, first_name, last_name, email, is_email_verified, hashed_password, password_changed_at, role, created_at, updated_at FROM users
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, userID int64) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsEmailVerified,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUser = `-- name: ListUser :many
SELECT user_id, user_name, first_name, last_name, email, is_email_verified, hashed_password, password_changed_at, role, created_at, updated_at FROM users
WHERE role = $1
ORDER BY user_id
LIMIT $2
OFFSET $3
`

type ListUserParams struct {
	Role   string `json:"role"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListUser(ctx context.Context, arg ListUserParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUser, arg.Role, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.UserName,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.IsEmailVerified,
			&i.HashedPassword,
			&i.PasswordChangedAt,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const studentCount = `-- name: StudentCount :one
SELECT COUNT(DISTINCT user_id) AS Count
FROM users
WHERE role = $1
`

func (q *Queries) StudentCount(ctx context.Context, role string) (int64, error) {
	row := q.db.QueryRow(ctx, studentCount, role)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET 
    hashed_password = COALESCE($1, hashed_password),
    password_changed_at = COALESCE($2, password_changed_at),
    first_name = COALESCE($3, first_name),
    last_name = COALESCE($4, last_name),
    email = COALESCE($5, email),
    is_email_verified = COALESCE($6, is_email_verified),
    user_name = COALESCE($7, user_name),
    role = COALESCE($8, role)
WHERE
    user_id = $9
RETURNING user_id, user_name, first_name, last_name, email, is_email_verified, hashed_password, password_changed_at, role, created_at, updated_at
`

type UpdateUserParams struct {
	HashedPassword    pgtype.Text        `json:"hashed_password"`
	PasswordChangedAt pgtype.Timestamptz `json:"password_changed_at"`
	FirstName         pgtype.Text        `json:"first_name"`
	LastName          pgtype.Text        `json:"last_name"`
	Email             pgtype.Text        `json:"email"`
	IsEmailVerified   pgtype.Bool        `json:"is_email_verified"`
	UserName          pgtype.Text        `json:"user_name"`
	Role              pgtype.Text        `json:"role"`
	UserID            int64              `json:"user_id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.HashedPassword,
		arg.PasswordChangedAt,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.IsEmailVerified,
		arg.UserName,
		arg.Role,
		arg.UserID,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsEmailVerified,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUsersPassword = `-- name: UpdateUsersPassword :one
UPDATE users
SET
    hashed_password = COALESCE($1, hashed_password),
    password_changed_at = COALESCE($2, password_changed_at),
    updated_at = COALESCE($3, updated_at)
WHERE 
    email = $4
RETURNING user_id, user_name, first_name, last_name, email, is_email_verified, hashed_password, password_changed_at, role, created_at, updated_at
`

type UpdateUsersPasswordParams struct {
	HashedPassword    pgtype.Text        `json:"hashed_password"`
	PasswordChangedAt pgtype.Timestamptz `json:"password_changed_at"`
	UpdatedAt         pgtype.Timestamptz `json:"updated_at"`
	Email             string             `json:"email"`
}

func (q *Queries) UpdateUsersPassword(ctx context.Context, arg UpdateUsersPasswordParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUsersPassword,
		arg.HashedPassword,
		arg.PasswordChangedAt,
		arg.UpdatedAt,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.IsEmailVerified,
		&i.HashedPassword,
		&i.PasswordChangedAt,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
