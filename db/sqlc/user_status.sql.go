// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user_status.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUserStatus = `-- name: CreateUserStatus :one
INSERT INTO user_status (
    user_id,
    active,
    pending
   
) VALUES (
    $1, $2, $3
) RETURNING status_id, user_id, active, pending, created_at
`

type CreateUserStatusParams struct {
	UserID  int64 `json:"user_id"`
	Active  bool  `json:"active"`
	Pending bool  `json:"pending"`
}

func (q *Queries) CreateUserStatus(ctx context.Context, arg CreateUserStatusParams) (UserStatus, error) {
	row := q.db.QueryRow(ctx, createUserStatus, arg.UserID, arg.Active, arg.Pending)
	var i UserStatus
	err := row.Scan(
		&i.StatusID,
		&i.UserID,
		&i.Active,
		&i.Pending,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUserStatus = `-- name: DeleteUserStatus :exec
DELETE FROM user_status
WHERE status_id = $1
`

func (q *Queries) DeleteUserStatus(ctx context.Context, statusID int64) error {
	_, err := q.db.Exec(ctx, deleteUserStatus, statusID)
	return err
}

const getUserStatus = `-- name: GetUserStatus :one
SELECT status_id, user_id, active, pending, created_at FROM user_status
WHERE user_id = $1
`

func (q *Queries) GetUserStatus(ctx context.Context, userID int64) (UserStatus, error) {
	row := q.db.QueryRow(ctx, getUserStatus, userID)
	var i UserStatus
	err := row.Scan(
		&i.StatusID,
		&i.UserID,
		&i.Active,
		&i.Pending,
		&i.CreatedAt,
	)
	return i, err
}

const listUserStatus = `-- name: ListUserStatus :many
SELECT status_id, user_id, active, pending, created_at FROM user_status
WHERE user_id = $1
ORDER BY status_id
LIMIT $2
OFFSET $3
`

type ListUserStatusParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUserStatus(ctx context.Context, arg ListUserStatusParams) ([]UserStatus, error) {
	rows, err := q.db.Query(ctx, listUserStatus, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserStatus{}
	for rows.Next() {
		var i UserStatus
		if err := rows.Scan(
			&i.StatusID,
			&i.UserID,
			&i.Active,
			&i.Pending,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserStatus = `-- name: UpdateUserStatus :one
UPDATE user_status
SET 
    status_id = COALESCE($1, status_id),
    active = COALESCE($2, active),
    pending = TRUE
WHERE
    user_id = $3
RETURNING status_id, user_id, active, pending, created_at
`

type UpdateUserStatusParams struct {
	StatusID pgtype.Int8 `json:"status_id"`
	Active   pgtype.Bool `json:"active"`
	UserID   int64       `json:"user_id"`
}

func (q *Queries) UpdateUserStatus(ctx context.Context, arg UpdateUserStatusParams) (UserStatus, error) {
	row := q.db.QueryRow(ctx, updateUserStatus, arg.StatusID, arg.Active, arg.UserID)
	var i UserStatus
	err := row.Scan(
		&i.StatusID,
		&i.UserID,
		&i.Active,
		&i.Pending,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserStatusByAdmin = `-- name: UpdateUserStatusByAdmin :one
UPDATE user_status
SET 
    pending = $1,
    active = $2
WHERE
    status_id = $3  
RETURNING status_id, user_id, active, pending, created_at
`

type UpdateUserStatusByAdminParams struct {
	Pending  bool  `json:"pending"`
	Active   bool  `json:"active"`
	StatusID int64 `json:"status_id"`
}

func (q *Queries) UpdateUserStatusByAdmin(ctx context.Context, arg UpdateUserStatusByAdminParams) (UserStatus, error) {
	row := q.db.QueryRow(ctx, updateUserStatusByAdmin, arg.Pending, arg.Active, arg.StatusID)
	var i UserStatus
	err := row.Scan(
		&i.StatusID,
		&i.UserID,
		&i.Active,
		&i.Pending,
		&i.CreatedAt,
	)
	return i, err
}
