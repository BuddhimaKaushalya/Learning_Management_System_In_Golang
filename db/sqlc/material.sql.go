// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: material.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMaterial = `-- name: CreateMaterial :one
INSERT INTO material (
    course_id,
    title,
    material_file,
    order_number
) VALUES (
    $1, $2, $3, $4
) RETURNING material_id, course_id, title, material_file, order_number, created_at, updated_at
`

type CreateMaterialParams struct {
	CourseID     int64  `json:"course_id"`
	Title        string `json:"title"`
	MaterialFile string `json:"material_file"`
	OrderNumber  int64  `json:"order_number"`
}

func (q *Queries) CreateMaterial(ctx context.Context, arg CreateMaterialParams) (Material, error) {
	row := q.db.QueryRow(ctx, createMaterial,
		arg.CourseID,
		arg.Title,
		arg.MaterialFile,
		arg.OrderNumber,
	)
	var i Material
	err := row.Scan(
		&i.MaterialID,
		&i.CourseID,
		&i.Title,
		&i.MaterialFile,
		&i.OrderNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMaterial = `-- name: DeleteMaterial :exec
DELETE FROM material
WHERE material_id = $1
`

func (q *Queries) DeleteMaterial(ctx context.Context, materialID int64) error {
	_, err := q.db.Exec(ctx, deleteMaterial, materialID)
	return err
}

const getMaterial = `-- name: GetMaterial :one
SELECT 
    m.material_id, m.course_id, m.title, m.material_file, m.order_number, m.created_at, m.updated_at
FROM 
    material m
LEFT JOIN 
    courses c ON m.course_id = c.course_id
WHERE 
    c.course_id = $1
    AND m.material_id = $2
`

type GetMaterialParams struct {
	CourseID   int64 `json:"course_id"`
	MaterialID int64 `json:"material_id"`
}

func (q *Queries) GetMaterial(ctx context.Context, arg GetMaterialParams) (Material, error) {
	row := q.db.QueryRow(ctx, getMaterial, arg.CourseID, arg.MaterialID)
	var i Material
	err := row.Scan(
		&i.MaterialID,
		&i.CourseID,
		&i.Title,
		&i.MaterialFile,
		&i.OrderNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMaterialByOrderNumber = `-- name: GetMaterialByOrderNumber :one
SELECT material_id, course_id, title, material_file, order_number, created_at, updated_at FROM material
WHERE 
    order_number = $1
    AND course_id = $2
LIMIT 1
`

type GetMaterialByOrderNumberParams struct {
	OrderNumber int64 `json:"order_number"`
	CourseID    int64 `json:"course_id"`
}

func (q *Queries) GetMaterialByOrderNumber(ctx context.Context, arg GetMaterialByOrderNumberParams) (Material, error) {
	row := q.db.QueryRow(ctx, getMaterialByOrderNumber, arg.OrderNumber, arg.CourseID)
	var i Material
	err := row.Scan(
		&i.MaterialID,
		&i.CourseID,
		&i.Title,
		&i.MaterialFile,
		&i.OrderNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTotalMaterialsInCourse = `-- name: GetTotalMaterialsInCourse :one
SELECT COUNT(*)
FROM material
WHERE course_id = $1
`

func (q *Queries) GetTotalMaterialsInCourse(ctx context.Context, courseID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getTotalMaterialsInCourse, courseID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listMaterial = `-- name: ListMaterial :many
SELECT  
    material_id
    course_id,
    title,
    material_file,
    order_number
FROM material
WHERE course_id = $1
ORDER BY material_id
LIMIT 100
`

type ListMaterialRow struct {
	CourseID     int64  `json:"course_id"`
	Title        string `json:"title"`
	MaterialFile string `json:"material_file"`
	OrderNumber  int64  `json:"order_number"`
}

func (q *Queries) ListMaterial(ctx context.Context, courseID int64) ([]ListMaterialRow, error) {
	rows, err := q.db.Query(ctx, listMaterial, courseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListMaterialRow{}
	for rows.Next() {
		var i ListMaterialRow
		if err := rows.Scan(
			&i.CourseID,
			&i.Title,
			&i.MaterialFile,
			&i.OrderNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMaterialByCourse = `-- name: ListMaterialByCourse :many
SELECT material_id, course_id, title, material_file, order_number, created_at, updated_at FROM material
WHERE 
    course_id = $1
ORDER BY material_id
LIMIT 10
`

func (q *Queries) ListMaterialByCourse(ctx context.Context, courseID int64) ([]Material, error) {
	rows, err := q.db.Query(ctx, listMaterialByCourse, courseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Material{}
	for rows.Next() {
		var i Material
		if err := rows.Scan(
			&i.MaterialID,
			&i.CourseID,
			&i.Title,
			&i.MaterialFile,
			&i.OrderNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMaterial = `-- name: UpdateMaterial :one
UPDATE material
SET
    title = COALESCE($1,title),
    material_file = COALESCE($2,material_file)
WHERE
    material_id = $3
RETURNING material_id, course_id, title, material_file, order_number, created_at, updated_at
`

type UpdateMaterialParams struct {
	Title        pgtype.Text `json:"title"`
	MaterialFile pgtype.Text `json:"material_file"`
	MaterialID   int64       `json:"material_id"`
}

func (q *Queries) UpdateMaterial(ctx context.Context, arg UpdateMaterialParams) (Material, error) {
	row := q.db.QueryRow(ctx, updateMaterial, arg.Title, arg.MaterialFile, arg.MaterialID)
	var i Material
	err := row.Scan(
		&i.MaterialID,
		&i.CourseID,
		&i.Title,
		&i.MaterialFile,
		&i.OrderNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
