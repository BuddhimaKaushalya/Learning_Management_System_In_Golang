// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: course_progress.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCourseProgress = `-- name: CreateCourseProgress :one
INSERT INTO course_progress (
    course_id,
    user_id,
    progress
) VALUES (
    $1, $2, $3
) RETURNING courseprogress_id, course_id, user_id, progress, created_at, updated_at
`

type CreateCourseProgressParams struct {
	CourseID int64 `json:"course_id"`
	UserID   int64 `json:"user_id"`
	Progress int64 `json:"progress"`
}

func (q *Queries) CreateCourseProgress(ctx context.Context, arg CreateCourseProgressParams) (CourseProgress, error) {
	row := q.db.QueryRow(ctx, createCourseProgress, arg.CourseID, arg.UserID, arg.Progress)
	var i CourseProgress
	err := row.Scan(
		&i.CourseprogressID,
		&i.CourseID,
		&i.UserID,
		&i.Progress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCourseProgress = `-- name: DeleteCourseProgress :exec
DELETE FROM course_progress
WHERE courseprogress_id = $1
`

func (q *Queries) DeleteCourseProgress(ctx context.Context, courseprogressID int64) error {
	_, err := q.db.Exec(ctx, deleteCourseProgress, courseprogressID)
	return err
}

const getCourseCompletedUserCount = `-- name: GetCourseCompletedUserCount :one
SELECT COUNT(*) 
FROM course_progress
WHERE progress = $1
`

func (q *Queries) GetCourseCompletedUserCount(ctx context.Context, progress int64) (int64, error) {
	row := q.db.QueryRow(ctx, getCourseCompletedUserCount, progress)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCourseProgress = `-- name: GetCourseProgress :one
SELECT courseprogress_id, course_id, user_id, progress, created_at, updated_at FROM course_progress
WHERE 
    user_id = $1
    AND course_id = $2
LIMIT 1
`

type GetCourseProgressParams struct {
	UserID   int64 `json:"user_id"`
	CourseID int64 `json:"course_id"`
}

func (q *Queries) GetCourseProgress(ctx context.Context, arg GetCourseProgressParams) (CourseProgress, error) {
	row := q.db.QueryRow(ctx, getCourseProgress, arg.UserID, arg.CourseID)
	var i CourseProgress
	err := row.Scan(
		&i.CourseprogressID,
		&i.CourseID,
		&i.UserID,
		&i.Progress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInProgressCourseCount = `-- name: GetInProgressCourseCount :one
SELECT COUNT(*) 
FROM course_progress
WHERE progress > 0
    AND progress < 100
`

func (q *Queries) GetInProgressCourseCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getInProgressCourseCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getTotalUserCompletedCourseCount = `-- name: GetTotalUserCompletedCourseCount :one
SELECT COUNT(*) 
FROM course_progress
WHERE 
    progress = $1
    AND user_id = $2
`

type GetTotalUserCompletedCourseCountParams struct {
	Progress int64 `json:"progress"`
	UserID   int64 `json:"user_id"`
}

func (q *Queries) GetTotalUserCompletedCourseCount(ctx context.Context, arg GetTotalUserCompletedCourseCountParams) (int64, error) {
	row := q.db.QueryRow(ctx, getTotalUserCompletedCourseCount, arg.Progress, arg.UserID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listCourseProgressByUser = `-- name: ListCourseProgressByUser :many
SELECT courseprogress_id, course_id, user_id, progress, created_at, updated_at FROM course_progress
WHERE user_id =$1
ORDER BY courseprogress_id
LIMIT $2
OFFSET $3
`

type ListCourseProgressByUserParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCourseProgressByUser(ctx context.Context, arg ListCourseProgressByUserParams) ([]CourseProgress, error) {
	rows, err := q.db.Query(ctx, listCourseProgressByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CourseProgress{}
	for rows.Next() {
		var i CourseProgress
		if err := rows.Scan(
			&i.CourseprogressID,
			&i.CourseID,
			&i.UserID,
			&i.Progress,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCourseProgress = `-- name: UpdateCourseProgress :one
UPDATE course_progress
SET 
    course_id = COALESCE($1, course_id),
    progress = COALESCE($2,progress)
WHERE
    user_id = $3
RETURNING courseprogress_id, course_id, user_id, progress, created_at, updated_at
`

type UpdateCourseProgressParams struct {
	CourseID pgtype.Int8 `json:"course_id"`
	Progress pgtype.Int8 `json:"progress"`
	UserID   int64       `json:"user_id"`
}

func (q *Queries) UpdateCourseProgress(ctx context.Context, arg UpdateCourseProgressParams) (CourseProgress, error) {
	row := q.db.QueryRow(ctx, updateCourseProgress, arg.CourseID, arg.Progress, arg.UserID)
	var i CourseProgress
	err := row.Scan(
		&i.CourseprogressID,
		&i.CourseID,
		&i.UserID,
		&i.Progress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
