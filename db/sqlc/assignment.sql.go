// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: assignment.sql

package db

import (
	"context"
)

const createAssignment = `-- name: CreateAssignment :one
INSERT INTO assignment (
    title,
    course_id,
    due_date,
    assignment_file
) VALUES (
    $1, $2, $3, $4
)  RETURNING assignment_id, course_id, title, assignment_file, due_date, created_at, updated_at
`

type CreateAssignmentParams struct {
	Title          string `json:"title"`
	CourseID       int64  `json:"course_id"`
	DueDate        string `json:"due_date"`
	AssignmentFile string `json:"assignment_file"`
}

func (q *Queries) CreateAssignment(ctx context.Context, arg CreateAssignmentParams) (Assignment, error) {
	row := q.db.QueryRow(ctx, createAssignment,
		arg.Title,
		arg.CourseID,
		arg.DueDate,
		arg.AssignmentFile,
	)
	var i Assignment
	err := row.Scan(
		&i.AssignmentID,
		&i.CourseID,
		&i.Title,
		&i.AssignmentFile,
		&i.DueDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAssignment = `-- name: DeleteAssignment :exec
DELETE FROM assignment
WHERE assignment_id = $1
`

func (q *Queries) DeleteAssignment(ctx context.Context, assignmentID int64) error {
	_, err := q.db.Exec(ctx, deleteAssignment, assignmentID)
	return err
}

const getAssignment = `-- name: GetAssignment :one
SELECT assignment_id, course_id, title, assignment_file, due_date, created_at, updated_at FROM assignment
WHERE assignment_id = $1
`

func (q *Queries) GetAssignment(ctx context.Context, assignmentID int64) (Assignment, error) {
	row := q.db.QueryRow(ctx, getAssignment, assignmentID)
	var i Assignment
	err := row.Scan(
		&i.AssignmentID,
		&i.CourseID,
		&i.Title,
		&i.AssignmentFile,
		&i.DueDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAssignment = `-- name: UpdateAssignment :one
UPDATE assignment
SET  title = $2,due_date = $3, assignment_file = $4, course_id = $5
WHERE assignment_id = $1
RETURNING assignment_id, course_id, title, assignment_file, due_date, created_at, updated_at
`

type UpdateAssignmentParams struct {
	AssignmentID   int64  `json:"assignment_id"`
	Title          string `json:"title"`
	DueDate        string `json:"due_date"`
	AssignmentFile string `json:"assignment_file"`
	CourseID       int64  `json:"course_id"`
}

func (q *Queries) UpdateAssignment(ctx context.Context, arg UpdateAssignmentParams) (Assignment, error) {
	row := q.db.QueryRow(ctx, updateAssignment,
		arg.AssignmentID,
		arg.Title,
		arg.DueDate,
		arg.AssignmentFile,
		arg.CourseID,
	)
	var i Assignment
	err := row.Scan(
		&i.AssignmentID,
		&i.CourseID,
		&i.Title,
		&i.AssignmentFile,
		&i.DueDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
