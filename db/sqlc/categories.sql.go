// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: categories.sql

package db

import (
	"context"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (
    category
   
) VALUES (
    $1
)  RETURNING category_id, category, created_at, updated_at
`

func (q *Queries) CreateCategory(ctx context.Context, category string) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory, category)
	var i Category
	err := row.Scan(
		&i.CategoryID,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories
WHERE category_id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, categoryID int64) error {
	_, err := q.db.Exec(ctx, deleteCategory, categoryID)
	return err
}

const getCategory = `-- name: GetCategory :one
SELECT category_id, category, created_at, updated_at FROM categories
WHERE category_id = $1
`

func (q *Queries) GetCategory(ctx context.Context, categoryID int64) (Category, error) {
	row := q.db.QueryRow(ctx, getCategory, categoryID)
	var i Category
	err := row.Scan(
		&i.CategoryID,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAllCategories = `-- name: ListAllCategories :many
SELECT category_id, category, created_at, updated_at FROM categories
WHERE category_id =$1
LIMIT $2
OFFSET $3
`

type ListAllCategoriesParams struct {
	CategoryID int64 `json:"category_id"`
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
}

func (q *Queries) ListAllCategories(ctx context.Context, arg ListAllCategoriesParams) ([]Category, error) {
	rows, err := q.db.Query(ctx, listAllCategories, arg.CategoryID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.CategoryID,
			&i.Category,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories
SET  category = $2
WHERE category_id = $1
RETURNING category_id, category, created_at, updated_at
`

type UpdateCategoryParams struct {
	CategoryID int64  `json:"category_id"`
	Category   string `json:"category"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, updateCategory, arg.CategoryID, arg.Category)
	var i Category
	err := row.Scan(
		&i.CategoryID,
		&i.Category,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
